module freetype::ft;

enum Error : int (CInt code, String description) {

    /* generic errors */

    OK = {0, "no error"},
    CANNOT_OPEN_RESOURCE = {0x01,"cannot open resource" },
    UNKNOWN_FILE_FORMAT = {0x02,"unknown file format" },
    INVALID_FILE_FORMAT = {0x03,"broken file" },
    INVALID_VERSION = {0x04,"invalid FreeType version" },
    LOWER_MODULE_VERSION = {0x05,"module version is too low" },
    INVALID_ARGUMENT = {0x06,"invalid argument" },
    UNIMPLEMENTED_FEATURE = {0x07,"unimplemented feature" },
    INVALID_TABLE = {0x08,"broken table" },
    INVALID_OFFSET = {0x09,"broken offset within table" },
    ARRAY_TOO_LARGE = {0x0A,"array allocation size too large" },
    MISSING_MODULE = {0x0B,"missing module" },
    MISSING_PROPERTY = {0x0C,"missing property" },

    /* glyph/character errors */

    INVALID_GLYPH_INDEX = {0x10,"invalid glyph index" },
    INVALID_CHARACTER_CODE = {0x11,"invalid character code" },
    INVALID_GLYPH_FORMAT = {0x12,"unsupported glyph image format" },
    CANNOT_RENDER_GLYPH = {0x13,"cannot render this glyph format" },
    INVALID_OUTLINE = {0x14,"invalid outline" },
    INVALID_COMPOSITE = {0x15,"invalid composite glyph" },
    TOO_MANY_HINTS = {0x16,"too many hints" },
    INVALID_PIXEL_SIZE = {0x17,"invalid pixel size" },

    /* handle errors */

    INVALID_HANDLE = {0x20,"invalid object handle" },
    INVALID_LIBRARY_HANDLE = {0x21,"invalid library handle" },
    INVALID_DRIVER_HANDLE = {0x22,"invalid module handle" },
    INVALID_FACE_HANDLE = {0x23,"invalid face handle" },
    INVALID_SIZE_HANDLE = {0x24,"invalid size handle" },
    INVALID_SLOT_HANDLE = {0x25,"invalid glyph slot handle" },
    INVALID_CHARMAP_HANDLE = {0x26,"invalid charmap handle" },
    INVALID_CACHE_HANDLE = {0x27,"invalid cache manager handle" },
    INVALID_STREAM_HANDLE = {0x28,"invalid stream handle" },

    /* driver errors */

    TOO_MANY_DRIVERS = {0x30,"too many modules" },
    TOO_MANY_EXTENSIONS = {0x31,"too many extensions" },

    /* driver errors */

    OUT_OF_MEMORY = {0x40,"out of memory" },
    UNLISTED_OBJECT = {0x41,"unlisted object" },

    /* stream errors */

    CANNOT_OPEN_STREAM = {0x51,"cannot open stream" },
    INVALID_STREAM_SEEK = {0x52,"invalid stream seek" },
    INVALID_STREAM_SKIP = {0x53,"invalid stream skip" },
    INVALID_STREAM_READ = {0x54,"invalid stream read" },
    INVALID_STREAM_OPERATION = {0x55,"invalid stream operation" },
    INVALID_FRAME_OPERATION = {0x56,"invalid frame operation" },
    NESTED_FRAME_ACCESS = {0x57,"nested frame access" },
    INVALID_FRAME_READ = {0x58,"invalid frame read" },

    /* raster errors */

    RASTER_UNINITIALIZED = {0x60,"raster uninitialized" },
    RASTER_CORRUPTED = {0x61,"raster corrupted" },
    RASTER_OVERFLOW = {0x62,"raster overflow" },
    RASTER_NEGATIVE_HEIGHT = {0x63,"negative height while rastering" },

    /* cache errors */

    TOO_MANY_CACHES = {0x70,"too many registered caches" },

    /* TrueType and SFNT errors */

    INVALID_OPCODE = {0x80,"invalid opcode" },
    TOO_FEW_ARGUMENTS = {0x81,"too few arguments" },
    STACK_OVERFLOW = {0x82,"stack overflow" },
    CODE_OVERFLOW = {0x83,"code overflow" },
    BAD_ARGUMENT = {0x84,"bad argument" },
    DIVIDE_BY_ZERO = {0x85,"division by zero" },
    INVALID_REFERENCE = {0x86,"invalid reference" },
    DEBUG_OPCODE = {0x87,"found debug opcode" },
    ENDF_IN_EXEC_STREAM = {0x88,"found ENDF opcode in execution stream" },
    NESTED_DEFS = {0x89,"nested DEFS" },
    INVALID_CODERANGE = {0x8A,"invalid code range" },
    EXECUTION_TOO_LONG = {0x8B,"execution context too long" },
    TOO_MANY_FUNCTION_DEFS = {0x8C,"too many function definitions" },
    TOO_MANY_INSTRUCTION_DEFS = {0x8D,"too many instruction definitions" },
    TABLE_MISSING = {0x8E,"SFNT font table missing" },
    HORIZ_HEADER_MISSING = {0x8F,"horizontal header (hhea) table missing" },
    LOCATIONS_MISSING = {0x90,"locations (loca) table missing" },
    NAME_TABLE_MISSING = {0x91,"name table missing" },
    CMAP_TABLE_MISSING = {0x92,"character map (cmap) table missing" },
    HMTX_TABLE_MISSING = {0x93,"horizontal metrics (hmtx) table missing" },
    POST_TABLE_MISSING = {0x94,"PostScript (post) table missing" },
    INVALID_HORIZ_METRICS = {0x95,"invalid horizontal metrics" },
    INVALID_CHARMAP_FORMAT = {0x96,"invalid character map (cmap) format" },
    INVALID_PPEM = {0x97,"invalid ppem value" },
    INVALID_VERT_METRICS = {0x98,"invalid vertical metrics" },
    COULD_NOT_FIND_CONTEXT = {0x99,"could not find context" },
    INVALID_POST_TABLE_FORMAT = {0x9A,"invalid PostScript (post) table format" },
    INVALID_POST_TABLE = {0x9B,"invalid PostScript (post) table" },
    DEF_IN_GLYF_BYTECODE = {0x9C,"found FDEF or IDEF opcode in glyf bytecode" },
    MISSING_BITMAP = {0x9D,"missing bitmap in strike" },

    /* CFF, CID, and Type 1 errors */

    SYNTAX_ERROR = {0xA0,"opcode syntax error" },
    STACK_UNDERFLOW = {0xA1,"argument stack underflow" },
    IGNORE = {0xA2,"ignore" },
    NO_UNICODE_GLYPH_NAME = {0xA3,"no Unicode glyph name found" },
    GLYPH_TOO_BIG = {0xA4,"glyph too big for hinting" },

    /* BDF errors */

    MISSING_STARTFONT_FIELD = {0xB0,"`STARTFONT' field missing" },
    MISSING_FONT_FIELD = {0xB1,"`FONT' field missing" },
    MISSING_SIZE_FIELD = {0xB2,"`SIZE' field missing" },
    MISSING_FONTBOUNDINGBOX_FIELD = {0xB3,"`FONTBOUNDINGBOX' field missing" },
    MISSING_CHARS_FIELD = {0xB4,"`CHARS' field missing" },
    MISSING_STARTCHAR_FIELD = {0xB5,"`STARTCHAR' field missing" },
    MISSING_ENCODING_FIELD = {0xB6,"`ENCODING' field missing" },
    MISSING_BBX_FIELD = {0xB7,"`BBX' field missing" },
    BBX_TOO_BIG = {0xB8,"`BBX' too big" },
    CORRUPTED_FONT_HEADER = {0xB9,"Font header corrupted or missing fields" },
    CORRUPTED_FONT_GLYPHS = {0xBA,"Font glyphs corrupted or missing fields" },
}

// #define FT_LOAD_DEFAULT                     0x0
// #define FT_LOAD_NO_SCALE                     ( 1L << 0 )
// #define FT_LOAD_NO_HINTING                   ( 1L << 1 )
// #define FT_LOAD_RENDER                       ( 1L << 2 )
// #define FT_LOAD_NO_BITMAP                    ( 1L << 3 )
// #define FT_LOAD_VERTICAL_LAYOUT              ( 1L << 4 )
// #define FT_LOAD_FORCE_AUTOHINT               ( 1L << 5 )
// #define FT_LOAD_CROP_BITMAP                  ( 1L << 6 )
// #define FT_LOAD_PEDANTIC                     ( 1L << 7 )
// #define FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH  ( 1L << 9 )
// #define FT_LOAD_NO_RECURSE                   ( 1L << 10 )
// #define FT_LOAD_IGNORE_TRANSFORM             ( 1L << 11 )
// #define FT_LOAD_MONOCHROME                   ( 1L << 12 )
// #define FT_LOAD_LINEAR_DESIGN                ( 1L << 13 )
// #define FT_LOAD_NO_AUTOHINT                  ( 1L << 15 )
//   /* Bits 16-19 are used by `FT_LOAD_TARGET_` */
// #define FT_LOAD_COLOR                        ( 1L << 20 )
// #define FT_LOAD_COMPUTE_METRICS              ( 1L << 21 )
// #define FT_LOAD_BITMAP_METRICS_ONLY          ( 1L << 22 )
// 
//   /* */
// 
//   /* used internally only by certain font drivers */
// #define FT_LOAD_ADVANCE_ONLY                 ( 1L << 8 )
// #define FT_LOAD_SBITS_ONLY                   ( 1L << 14 )

def Long = long; // FT_Long
def Face = void*; // FT_Face
def ULong = ulong; // FT_ULong
def UInt = uint; // FT_UInt
def Int32 = int; // FT_Int32
def Int = int; // FT_Int32
def String = void*; // FT_String
def Library = void*; // FT_Library
def Short = short; // FT_Short

struct Bitmap {
    CUInt rows;
    CUInt width;
    CInt             pitch;
    CUInt*  buffer;
    CUShort  num_grays;
    CUInt   pixel_mode;
    CUChar   palette_mode;
    void*           palette;
}

struct GlyphSlotRec {
    void*        library;
    void*           face;
    void*      next;
    void*           glyph_index; /* new in 2.10; was reserved previously */
    void*        generic;

    void*  metrics;
    void*          linearHoriAdvance;
    void*          linearVertAdvance;
    void*         advance;

    void*   format;

    Bitmap         bitmap;
    void*            bitmap_left;
    void*            bitmap_top;

    void*        outline;

    void*           num_subglyphs;
    void*       subglyphs;

    void*             control_data;
    void*              control_len;

    void*            lsb_delta;
    void*            rsb_delta;

    void*             other;

    void*  internal;
}

struct FaceRec {
    Long           num_faces;
    Long           face_index;

    Long           face_flags;
    Long           style_flags;

    Long           num_glyphs;

    String*        family_name;
    String*        style_name;

    Int            num_fixed_sizes;
    void*   available_sizes;

    Int            num_charmaps;
    void*       charmaps;

    void*        generic;

    /*# The following member variables (down to `underline_thickness`) */
    /*# are only relevant to scalable outlines; cf. @FT_Bitmap_Size    */
    /*# for bitmap fonts.                                              */
    void*           bbox;

    void*         units_per_EM;
    void*          ascender;
    void*          descender;
    void*          height;

    Short          max_advance_width;
    Short          max_advance_height;

    Short          underline_position;
    Short          underline_thickness;

    void*      glyph;
    void*           size;
    void*        charmap;

    /*@private begin */

    void*         driver;
    void*         memory;
    void*         stream;

    void*        sizes_list;

    void*        autohint;   /* face-specific auto-hinter data */
    void*             extensions; /* unused                         */

    void*  internal;

    /*@private end */
}

fn CInt initFreeType(Library* library) @extern("FT_Init_FreeType");
fn CInt doneFreeType(Library library) @extern("FT_Done_FreeType");


fn CInt newFace(Library* library, ZString pathname, Long face_index, Face* aface) @extern("FT_New_Face");
fn CInt doneFace(Face face) @extern("FT_Done_Face");

fn UInt getCharIndex(Face face, ULong charcode) @extern("FT_Get_Char_Index");

fn CInt loadGlyph(Face face, UInt glyph_index, Int32 load_flags) @extern("FT_Load_Glyph");

fn CInt loadChar(Face face, ULong char_code, Int32 load_flags) @extern("FT_Load_Char");

fn CInt setPixelSizes(Face face, UInt pixel_width, UInt pixel_height) @extern("FT_Set_Pixel_Sizes");
