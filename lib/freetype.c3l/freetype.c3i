module freetype::ft;

// enum Error : int (CInt code, String description) {
//
//     /* generic errors */
//
//     OK = {0, "no error"},
//     CANNOT_OPEN_RESOURCE = {0x01,"cannot open resource" },
//     UNKNOWN_FILE_FORMAT = {0x02,"unknown file format" },
//     INVALID_FILE_FORMAT = {0x03,"broken file" },
//     INVALID_VERSION = {0x04,"invalid FreeType version" },
//     LOWER_MODULE_VERSION = {0x05,"module version is too low" },
//     INVALID_ARGUMENT = {0x06,"invalid argument" },
//     UNIMPLEMENTED_FEATURE = {0x07,"unimplemented feature" },
//     INVALID_TABLE = {0x08,"broken table" },
//     INVALID_OFFSET = {0x09,"broken offset within table" },
//     ARRAY_TOO_LARGE = {0x0A,"array allocation size too large" },
//     MISSING_MODULE = {0x0B,"missing module" },
//     MISSING_PROPERTY = {0x0C,"missing property" },
//
//     /* glyph/character errors */
//
//     INVALID_GLYPH_INDEX = {0x10,"invalid glyph index" },
//     INVALID_CHARACTER_CODE = {0x11,"invalid character code" },
//     INVALID_GLYPH_FORMAT = {0x12,"unsupported glyph image format" },
//     CANNOT_RENDER_GLYPH = {0x13,"cannot render this glyph format" },
//     INVALID_OUTLINE = {0x14,"invalid outline" },
//     INVALID_COMPOSITE = {0x15,"invalid composite glyph" },
//     TOO_MANY_HINTS = {0x16,"too many hints" },
//     INVALID_PIXEL_SIZE = {0x17,"invalid pixel size" },
//
//     /* handle errors */
//
//     INVALID_HANDLE = {0x20,"invalid object handle" },
//     INVALID_LIBRARY_HANDLE = {0x21,"invalid library handle" },
//     INVALID_DRIVER_HANDLE = {0x22,"invalid module handle" },
//     INVALID_FACE_HANDLE = {0x23,"invalid face handle" },
//     INVALID_SIZE_HANDLE = {0x24,"invalid size handle" },
//     INVALID_SLOT_HANDLE = {0x25,"invalid glyph slot handle" },
//     INVALID_CHARMAP_HANDLE = {0x26,"invalid charmap handle" },
//     INVALID_CACHE_HANDLE = {0x27,"invalid cache manager handle" },
//     INVALID_STREAM_HANDLE = {0x28,"invalid stream handle" },
//
//     /* driver errors */
//
//     TOO_MANY_DRIVERS = {0x30,"too many modules" },
//     TOO_MANY_EXTENSIONS = {0x31,"too many extensions" },
//
//     /* driver errors */
//
//     OUT_OF_MEMORY = {0x40,"out of memory" },
//     UNLISTED_OBJECT = {0x41,"unlisted object" },
//
//     /* stream errors */
//
//     CANNOT_OPEN_STREAM = {0x51,"cannot open stream" },
//     INVALID_STREAM_SEEK = {0x52,"invalid stream seek" },
//     INVALID_STREAM_SKIP = {0x53,"invalid stream skip" },
//     INVALID_STREAM_READ = {0x54,"invalid stream read" },
//     INVALID_STREAM_OPERATION = {0x55,"invalid stream operation" },
//     INVALID_FRAME_OPERATION = {0x56,"invalid frame operation" },
//     NESTED_FRAME_ACCESS = {0x57,"nested frame access" },
//     INVALID_FRAME_READ = {0x58,"invalid frame read" },
//
//     /* raster errors */
//
//     RASTER_UNINITIALIZED = {0x60,"raster uninitialized" },
//     RASTER_CORRUPTED = {0x61,"raster corrupted" },
//     RASTER_OVERFLOW = {0x62,"raster overflow" },
//     RASTER_NEGATIVE_HEIGHT = {0x63,"negative height while rastering" },
//
//     /* cache errors */
//
//     TOO_MANY_CACHES = {0x70,"too many registered caches" },
//
//     /* TrueType and SFNT errors */
//
//     INVALID_OPCODE = {0x80,"invalid opcode" },
//     TOO_FEW_ARGUMENTS = {0x81,"too few arguments" },
//     STACK_OVERFLOW = {0x82,"stack overflow" },
//     CODE_OVERFLOW = {0x83,"code overflow" },
//     BAD_ARGUMENT = {0x84,"bad argument" },
//     DIVIDE_BY_ZERO = {0x85,"division by zero" },
//     INVALID_REFERENCE = {0x86,"invalid reference" },
//     DEBUG_OPCODE = {0x87,"found debug opcode" },
//     ENDF_IN_EXEC_STREAM = {0x88,"found ENDF opcode in execution stream" },
//     NESTED_DEFS = {0x89,"nested DEFS" },
//     INVALID_CODERANGE = {0x8A,"invalid code range" },
//     EXECUTION_TOO_LONG = {0x8B,"execution context too long" },
//     TOO_MANY_FUNCTION_DEFS = {0x8C,"too many function definitions" },
//     TOO_MANY_INSTRUCTION_DEFS = {0x8D,"too many instruction definitions" },
//     TABLE_MISSING = {0x8E,"SFNT font table missing" },
//     HORIZ_HEADER_MISSING = {0x8F,"horizontal header (hhea) table missing" },
//     LOCATIONS_MISSING = {0x90,"locations (loca) table missing" },
//     NAME_TABLE_MISSING = {0x91,"name table missing" },
//     CMAP_TABLE_MISSING = {0x92,"character map (cmap) table missing" },
//     HMTX_TABLE_MISSING = {0x93,"horizontal metrics (hmtx) table missing" },
//     POST_TABLE_MISSING = {0x94,"PostScript (post) table missing" },
//     INVALID_HORIZ_METRICS = {0x95,"invalid horizontal metrics" },
//     INVALID_CHARMAP_FORMAT = {0x96,"invalid character map (cmap) format" },
//     INVALID_PPEM = {0x97,"invalid ppem value" },
//     INVALID_VERT_METRICS = {0x98,"invalid vertical metrics" },
//     COULD_NOT_FIND_CONTEXT = {0x99,"could not find context" },
//     INVALID_POST_TABLE_FORMAT = {0x9A,"invalid PostScript (post) table format" },
//     INVALID_POST_TABLE = {0x9B,"invalid PostScript (post) table" },
//     DEF_IN_GLYF_BYTECODE = {0x9C,"found FDEF or IDEF opcode in glyf bytecode" },
//     MISSING_BITMAP = {0x9D,"missing bitmap in strike" },
//
//     /* CFF, CID, and Type 1 errors */
//
//     SYNTAX_ERROR = {0xA0,"opcode syntax error" },
//     STACK_UNDERFLOW = {0xA1,"argument stack underflow" },
//     IGNORE = {0xA2,"ignore" },
//     NO_UNICODE_GLYPH_NAME = {0xA3,"no Unicode glyph name found" },
//     GLYPH_TOO_BIG = {0xA4,"glyph too big for hinting" },
//
//     /* BDF errors */
//
//     MISSING_STARTFONT_FIELD = {0xB0,"`STARTFONT' field missing" },
//     MISSING_FONT_FIELD = {0xB1,"`FONT' field missing" },
//     MISSING_SIZE_FIELD = {0xB2,"`SIZE' field missing" },
//     MISSING_FONTBOUNDINGBOX_FIELD = {0xB3,"`FONTBOUNDINGBOX' field missing" },
//     MISSING_CHARS_FIELD = {0xB4,"`CHARS' field missing" },
//     MISSING_STARTCHAR_FIELD = {0xB5,"`STARTCHAR' field missing" },
//     MISSING_ENCODING_FIELD = {0xB6,"`ENCODING' field missing" },
//     MISSING_BBX_FIELD = {0xB7,"`BBX' field missing" },
//     BBX_TOO_BIG = {0xB8,"`BBX' too big" },
//     CORRUPTED_FONT_HEADER = {0xB9,"Font header corrupted or missing fields" },
//     CORRUPTED_FONT_GLYPHS = {0xBA,"Font glyphs corrupted or missing fields" },
// }

// #define FT_LOAD_DEFAULT                      0x0
// #define FT_LOAD_NO_SCALE                     ( 1L << 0  )
// #define FT_LOAD_NO_HINTING                   ( 1L << 1  )
// #define FT_LOAD_RENDER                       ( 1L << 2  )
const LOAD_RENDER = ((long)1)<<2;
// #define FT_LOAD_NO_BITMAP                    ( 1L << 3  )
// #define FT_LOAD_VERTICAL_LAYOUT              ( 1L << 4  )
// #define FT_LOAD_FORCE_AUTOHINT               ( 1L << 5  )
// #define FT_LOAD_CROP_BITMAP                  ( 1L << 6  )
// #define FT_LOAD_PEDANTIC                     ( 1L << 7  )
// #define FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH  ( 1L << 9  )
// #define FT_LOAD_NO_RECURSE                   ( 1L << 10 )
// #define FT_LOAD_IGNORE_TRANSFORM             ( 1L << 11 )
// #define FT_LOAD_MONOCHROME                   ( 1L << 12 )
// #define FT_LOAD_LINEAR_DESIGN                ( 1L << 13 )
// #define FT_LOAD_SBITS_ONLY                   ( 1L << 14 )
// #define FT_LOAD_NO_AUTOHINT                  ( 1L << 15 )
//   /* Bits 16-19 are used by `FT_LOAD_TARGET_` */
// #define FT_LOAD_COLOR                        ( 1L << 20 )
// #define FT_LOAD_COMPUTE_METRICS              ( 1L << 21 )
// #define FT_LOAD_BITMAP_METRICS_ONLY          ( 1L << 22 )
// #define FT_LOAD_NO_SVG                       ( 1L << 24 )
//
//   /* */
//
//   /* used internally only by certain font drivers */
// #define FT_LOAD_ADVANCE_ONLY                 ( 1L << 8  )
// #define FT_LOAD_SVG_ONLY                     ( 1L << 23 )


//typedef signed short FT_Short;
def Short = CShort;
// typedef signed int FT_Int;
def Int = CInt;
// typedef char FT_String;
def String = CChar;
// typedef unsigned int FT_UInt;
def UInt = CUInt;
// typedef unsigned short FT_UShort;
def UShort = CUShort;
// typedef signed long FT_Long;
def Long = CLong;
// typedef unsigned long FT_ULong;
def ULong = CULong;
// typedef signed int FT_Int32;
def Int32 = CInt;
// typedef unsigned int FT_UInt32;
def UInt32 = CUInt;
// typedef signed long FT_Fixed;
def Fixed = CLong;
// typedef signed long FT_F26Dot6;
def F26Dot6 = CLong;
// typedef signed long FT_Pos;
def Pos = CLong;

// typedef int FT_Error;
def Error = CInt;

def Library = void*; // FT_Library

struct Matrix {
    Fixed xx, xy;
    Fixed yx, yy;
}

struct BBox {
    // FT_Pos  xMin, yMin;
    Pos xMin, yMin;
    // FT_Pos  xMax, yMax;
    Pos xMax, yMax;
}

// typedef void  (*FT_Generic_Finalizer)( void*  object );
// def GenericFinalizer = fn void(void* object);

struct Generic {
    // void*                 data;
    void* data;
    // FT_Generic_Finalizer  finalizer;
    void* finalizer;
}

struct CharMapRec {
    // FT_Face face;
    Face face;
    // FT_Encoding encoding;
    CInt encoding;
    // FT_UShort platform_id;
    UShort platform_id;
    // FT_UShort encoding_id;
    UShort encoding_id;
}
// typedef struct FT_CharMapRec_*  FT_CharMap;
def CharMap = CharMapRec*;

struct BitmapSize {
    // FT_Short height;
    Short height;
    // FT_Short width;
    Short width;
    // FT_Pos size;
    Pos size;
    // FT_Pos x_ppem;
    Pos x_ppem;
    // FT_Pos y_ppem;
    Pos y_ppem;
}

struct Bitmap {
    UInt    rows;
    UInt    width;
    void*   pitch;
    void* buffer;
    void*   num_grays;
    void*  pixel_mode;
    void*   palette_mode;
    void*   palette;
}

struct GlyphSlotRec {
    // FT_Library library;
    void* library;
    // FT_Face face;
    void* face;
    // FT_GlyphSlot next;
    void* next;
    // FT_UInt glyph_index;
    void* glyph_index;
    // FT_Generic generic;
    void* generic;
    // FT_Glyph_Metrics metrics;
    void* metrics;
    // FT_Fixed linearHoriAdvance;
    void* linearHoriAdvance;
    // FT_Fixed linearVertAdvance;
    void* linearVertAdvance;
    // FT_Vector advance;
    void* advance;
    // FT_Glyph_Format format;
    void* format;
    // FT_Bitmap bitmap;
    Bitmap bitmap;
    // FT_Int bitmap_left;
    Int bitmap_left;
    // FT_Int bitmap_top;
    Int bitmap_top;
    // FT_Outline outline;
    void* outline;
    // FT_UInt num_subglyphs;
    void* num_subglyphs;
    // FT_SubGlyph subglyphs;
    void* subglyphs;
    // void* control_data;
    void* control_data;
    // long control_len;
    void* control_len;
    // FT_Pos lsb_delta;
    void* lsb_delta;
    // FT_Pos rsb_delta;
    void* rsb_delta;
    // void* other;
    void* other;
    // FT_Slot_Internal internal;
    void* internal;
}
// typedef struct FT_GlyphSlotRec_*  FT_GlyphSlot;
def GlyphSlot = GlyphSlotRec*;

struct FaceRec {
    // FT_Long num_faces;
    Long num_faces;
    // FT_Long face_index;
    Long face_index;
    // FT_Long face_flags;
    Long face_flags;
    // FT_Long style_flags;
    Long style_flags;
    // FT_Long num_glyphs;
    Long num_glyphs;
    // FT_String* family_name;
    String* family_name;
    // FT_String* style_name;
    String* style_name;
    // FT_Int num_fixed_sizes;
    Int num_fixed_sizes;
    // FT_Bitmap_Size* available_sizes;
    BitmapSize* available_sizes;
    // FT_Int num_charmaps;
    Int num_charmaps;
    // FT_CharMap* charmaps;
    CharMap* charmaps;
    // FT_Generic generic;
    Generic generic;
    // FT_BBox bbox;
    BBox bbox;
    // FT_UShort units_per_EM;
    UShort units_per_EM;
    // FT_Short ascender;
    void* ascender;
    // FT_Short descender;
    void* descender;
    // FT_Short height;
    void* height;
    // FT_Short max_advance_width;
    void* max_advance_width;
    // FT_Short max_advance_height;
    void* max_advance_height;
    // FT_Short underline_position;
    void* underline_position;
    // FT_Short underline_thickness;
    void* underline_thickness;
    // FT_GlyphSlot glyph;
    GlyphSlot glyph;
    // FT_Size size;
    void* size;
    //FT_CharMap charmap;
    void* charmap;
    // FT_Driver driver;
    void* driver;
    // FT_Memory memory;
    void* memory;
    // FT_Stream stream;
    void* stream;
    // FT_ListRec sizes_list;
    void* sizes_list;
    // FT_Generic autohint;
    void* autohint;
    // void* extensions;
    void* extensions;
    // FT_Face_Internal internal;
    void* internal;
}
// typedef struct FT_FaceRec_*  FT_Face;
def Face = FaceRec*;

fn Error initFreeType(Library* library) @extern("FT_Init_FreeType");
fn Error doneFreeType(Library library) @extern("FT_Done_FreeType");

fn Error newFace(Library* library, ZString pathname, Long face_index, Face* aface) @extern("FT_New_Face");
fn Error doneFace(Face face) @extern("FT_Done_Face");

fn UInt getCharIndex(Face face, ULong charcode) @extern("FT_Get_Char_Index");

fn Error loadGlyph(Face face, UInt glyph_index, Long load_flags) @extern("FT_Load_Glyph");

fn Error loadChar(Face face, ULong char_code, Long load_flags) @extern("FT_Load_Char");

fn Error setPixelSizes(Face face, UInt pixel_width, UInt pixel_height) @extern("FT_Set_Pixel_Sizes");

fn Error setCharSize(Face face, F26Dot6 char_width, F26Dot6 char_height, CUInt horz_resolution, UInt vert_resolution ) @extern("FT_Set_Char_Size");

//    ft::UInt idx = ft::getCharIndex(face, 'h');
//    if (idx == 0) {
//        logger::printfn("can't get char index: %s", err);
//        return -1;
//    }
//
//    err = ft::loadGlyph(face, idx, 0);
//    if (err != ft::Error.OK.code) {
//        logger::printfn("can't load glyph: %s", err);
//        return -1;
//    }

