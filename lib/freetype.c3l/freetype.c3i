module freetype::ft;

// typedef int FT_Error;
def Error = CInt;

const Error OK =                    0;
const Error CANNOT_OPEN_RESOURCE =  0x01;
const Error UNKNOWN_FILE_FORMAT =   0x02;
const Error INVALID_FILE_FORMAT =   0x03;
const Error INVALID_VERSION =       0x04;
const Error LOWER_MODULE_VERSION =  0x05;
const Error INVALID_ARGUMENT =      0x06;
const Error UNIMPLEMENTED_FEATURE = 0x07;
const Error INVALID_TABLE =         0x08;
const Error INVALID_OFFSET =        0x09;
const Error ARRAY_TOO_LARGE =       0x0A;
const Error MISSING_MODULE =        0x0B;
const Error MISSING_PROPERTY =      0x0C;

/* glyph/character errors */

const Error INVALID_GLYPH_INDEX =    0x10;
const Error INVALID_CHARACTER_CODE = 0x11;
const Error INVALID_GLYPH_FORMAT =   0x12;
const Error CANNOT_RENDER_GLYPH =    0x13;
const Error INVALID_OUTLINE =        0x14;
const Error INVALID_COMPOSITE =      0x15;
const Error TOO_MANY_HINTS =         0x16;
const Error INVALID_PIXEL_SIZE =     0x17;

/* handle errors */

const Error INVALID_HANDLE =         0x20;
const Error INVALID_LIBRARY_HANDLE = 0x21;
const Error INVALID_DRIVER_HANDLE =  0x22;
const Error INVALID_FACE_HANDLE =    0x23;
const Error INVALID_SIZE_HANDLE =    0x24;
const Error INVALID_SLOT_HANDLE =    0x25;
const Error INVALID_CHARMAP_HANDLE = 0x26;
const Error INVALID_CACHE_HANDLE =   0x27;
const Error INVALID_STREAM_HANDLE =  0x28;

/* driver errors */

const Error TOO_MANY_DRIVERS =    0x30;
const Error TOO_MANY_EXTENSIONS = 0x31;

/* driver errors */

const Error OUT_OF_MEMORY =   0x40;
const Error UNLISTED_OBJECT = 0x41;

/* stream errors */

const Error CANNOT_OPEN_STREAM =       0x51;
const Error INVALID_STREAM_SEEK =      0x52;
const Error INVALID_STREAM_SKIP =      0x53;
const Error INVALID_STREAM_READ =      0x54;
const Error INVALID_STREAM_OPERATION = 0x55;
const Error INVALID_FRAME_OPERATION =  0x56;
const Error NESTED_FRAME_ACCESS =      0x57;
const Error INVALID_FRAME_READ =       0x58;

/* raster errors */

const Error RASTER_UNINITIALIZED =   0x60;
const Error RASTER_CORRUPTED =       0x61;
const Error RASTER_OVERFLOW =        0x62;
const Error RASTER_NEGATIVE_HEIGHT = 0x63;

/* cache errors */

const Error TOO_MANY_CACHES = 0x70;

/* TrueType and SFNT errors */

const Error INVALID_OPCODE =            0x80;
const Error TOO_FEW_ARGUMENTS =         0x81;
const Error STACK_OVERFLOW =            0x82;
const Error CODE_OVERFLOW =             0x83;
const Error BAD_ARGUMENT =              0x84;
const Error DIVIDE_BY_ZERO =            0x85;
const Error INVALID_REFERENCE =         0x86;
const Error DEBUG_OPCODE =              0x87;
const Error ENDF_IN_EXEC_STREAM =       0x88;
const Error NESTED_DEFS =               0x89;
const Error INVALID_CODERANGE =         0x8A;
const Error EXECUTION_TOO_LONG =        0x8B;
const Error TOO_MANY_FUNCTION_DEFS =    0x8C;
const Error TOO_MANY_INSTRUCTION_DEFS = 0x8D;
const Error TABLE_MISSING =             0x8E;
const Error HORIZ_HEADER_MISSING =      0x8F;
const Error LOCATIONS_MISSING =         0x90;
const Error NAME_TABLE_MISSING =        0x91;
const Error CMAP_TABLE_MISSING =        0x92;
const Error HMTX_TABLE_MISSING =        0x93;
const Error POST_TABLE_MISSING =        0x94;
const Error INVALID_HORIZ_METRICS =     0x95;
const Error INVALID_CHARMAP_FORMAT =    0x96;
const Error INVALID_PPEM =              0x97;
const Error INVALID_VERT_METRICS =      0x98;
const Error COULD_NOT_FIND_CONTEXT =    0x99;
const Error INVALID_POST_TABLE_FORMAT = 0x9A;
const Error INVALID_POST_TABLE =        0x9B;
const Error DEF_IN_GLYF_BYTECODE =      0x9C;
const Error MISSING_BITMAP =            0x9D;

/* CFF, CID, and Type 1 errors */

const Error SYNTAX_ERROR =          0xA0;
const Error STACK_UNDERFLOW =       0xA1;
const Error IGNORE =                0xA2;
const Error NO_UNICODE_GLYPH_NAME = 0xA3;
const Error GLYPH_TOO_BIG =         0xA4;

/* BDF errors */

const Error MISSING_STARTFONT_FIELD =       0xB0;
const Error MISSING_FONT_FIELD =            0xB1;
const Error MISSING_SIZE_FIELD =            0xB2;
const Error MISSING_FONTBOUNDINGBOX_FIELD = 0xB3;
const Error MISSING_CHARS_FIELD =           0xB4;
const Error MISSING_STARTCHAR_FIELD =       0xB5;
const Error MISSING_ENCODING_FIELD =        0xB6;
const Error MISSING_BBX_FIELD =             0xB7;
const Error BBX_TOO_BIG =                   0xB8;
const Error CORRUPTED_FONT_HEADER =         0xB9;
const Error CORRUPTED_FONT_GLYPHS =         0xBA;

// #define FT_LOAD_DEFAULT                      0x0
const LOAD_DEFAULT =                            0x0;
// #define FT_LOAD_NO_SCALE                     ( 1L << 0  )
const LOAD_NO_SCALE =                           ( 1L << 0  );
// #define FT_LOAD_NO_HINTING                   ( 1L << 1  )
const LOAD_NO_HINTING =                         ( 1L << 1  );
// #define FT_LOAD_RENDER                       ( 1L << 2  )
const LOAD_RENDER =                             ( 1L << 2  );
// #define FT_LOAD_NO_BITMAP                    ( 1L << 3  )
const LOAD_NO_BITMAP =                          ( 1L << 3  );
// #define FT_LOAD_VERTICAL_LAYOUT              ( 1L << 4  )
const LOAD_VERTICAL_LAYOUT =                    ( 1L << 4  );
// #define FT_LOAD_FORCE_AUTOHINT               ( 1L << 5  )
const LOAD_FORCE_AUTOHINT =                     ( 1L << 5  );
// #define FT_LOAD_CROP_BITMAP                  ( 1L << 6  )
const LOAD_CROP_BITMAP =                        ( 1L << 6  );
// #define FT_LOAD_PEDANTIC                     ( 1L << 7  )
const LOAD_PEDANTIC =                           ( 1L << 7  );
// #define FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH  ( 1L << 9  )
const LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH =        ( 1L << 9  );
// #define FT_LOAD_NO_RECURSE                   ( 1L << 10 )
const LOAD_NO_RECURSE =                         ( 1L << 10 );
// #define FT_LOAD_IGNORE_TRANSFORM             ( 1L << 11 )
const LOAD_IGNORE_TRANSFORM =                   ( 1L << 11 );
// #define FT_LOAD_MONOCHROME                   ( 1L << 12 )
const LOAD_MONOCHROME =                         ( 1L << 12 );
// #define FT_LOAD_LINEAR_DESIGN                ( 1L << 13 )
const LOAD_LINEAR_DESIGN =                      ( 1L << 13 );
// #define FT_LOAD_SBITS_ONLY                   ( 1L << 14 )
const LOAD_SBITS_ONLY =                         ( 1L << 14 );
// #define FT_LOAD_NO_AUTOHINT                  ( 1L << 15 )
const LOAD_NO_AUTOHINT =                        ( 1L << 15 );
//   /* Bits 16-19 are used by `FT_LOAD_TARGET_` */
// #define FT_LOAD_COLOR                        ( 1L << 20 )
const LOAD_COLOR =                              ( 1L << 20 );
// #define FT_LOAD_COMPUTE_METRICS              ( 1L << 21 )
const LOAD_COMPUTE_METRICS =                    ( 1L << 21 );
// #define FT_LOAD_BITMAP_METRICS_ONLY          ( 1L << 22 )
const LOAD_BITMAP_METRICS_ONLY =                ( 1L << 22 );
// #define FT_LOAD_NO_SVG                       ( 1L << 24 )
const LOAD_NO_SVG =                             ( 1L << 24 );

//typedef signed short FT_Short;
def Short = CShort;
// typedef signed int FT_Int;
def Int = CInt;
// typedef char FT_String;
def String = CChar;
// typedef unsigned int FT_UInt;
def UInt = CUInt;
// typedef unsigned short FT_UShort;
def UShort = CUShort;
// typedef signed long FT_Long;
def Long = CLong;
// typedef unsigned long FT_ULong;
def ULong = CULong;
// typedef signed int FT_Int32;
def Int32 = CInt;
// typedef unsigned int FT_UInt32;
def UInt32 = CUInt;
// typedef signed long FT_Fixed;
def Fixed = CLong;
// typedef signed long FT_F26Dot6;
def F26Dot6 = CLong;
// typedef signed long FT_Pos;
def Pos = CLong;

// FT_Library
def Library = void*;

struct Matrix {
    Fixed xx, xy;
    Fixed yx, yy;
}

struct BBox {
    // FT_Pos  xMin, yMin;
    Pos xMin, yMin;
    // FT_Pos  xMax, yMax;
    Pos xMax, yMax;
}

// typedef void  (*FT_Generic_Finalizer)( void*  object );
// def GenericFinalizer = fn void(void* object);

struct Generic {
    // void*                 data;
    void* data;
    // FT_Generic_Finalizer  finalizer;
    void* finalizer;
}

struct CharMapRec {
    // FT_Face face;
    Face face;
    // FT_Encoding encoding;
    CInt encoding;
    // FT_UShort platform_id;
    UShort platform_id;
    // FT_UShort encoding_id;
    UShort encoding_id;
}
// typedef struct FT_CharMapRec_*  FT_CharMap;
def CharMap = CharMapRec*;

struct BitmapSize {
    // FT_Short height;
    Short height;
    // FT_Short width;
    Short width;
    // FT_Pos size;
    Pos size;
    // FT_Pos x_ppem;
    Pos x_ppem;
    // FT_Pos y_ppem;
    Pos y_ppem;
}

struct Bitmap {
    // unsigned int rows;
    CUInt rows;
    // unsigned int width;
    UInt width;
    // int pitch;
    CInt pitch;
    // unsigned char* buffer;
    CUChar* buffer;
    // unsigned short num_grays;
    CUShort num_grays;
    // unsigned char pixel_mode;
    CUChar pixel_mode;
    // unsigned char palette_mode;
    CUChar palette_mode;
    // void* palette;
    void* palette;
}

struct Vector {
    // FT_Pos  x;
    Pos  x;
    // FT_Pos  y;
    Pos  y;
}

struct GlyphMetrics {
    // FT_Pos width;
    Pos width;
    // FT_Pos height;
    Pos height;
    // FT_Pos horiBearingX;
    Pos horiBearingX;
    // FT_Pos horiBearingY;
    Pos horiBearingY;
    // FT_Pos horiAdvance;
    Pos horiAdvance;
    // FT_Pos vertBearingX;
    Pos vertBearingX;
    // FT_Pos vertBearingY;
    Pos vertBearingY;
    // FT_Pos vertAdvance;
    Pos vertAdvance;
}

struct Outline {
    // unsigned short n_contours;
    CUShort n_contours;
    // unsigned short n_points;
    CUShort n_points;
    // FT_Vector* points;
    Vector * points;
    // unsigned char* tags;
    CUChar* tags;
    // unsigned short* contours;
    CUShort* contours;
    // int  flags;
    CInt flags;
}

struct SizeMetrics {
    // FT_UShort x_ppem;
    UShort x_ppem;
    // FT_UShort y_ppem;
    UShort y_ppem;
    // FT_Fixed x_scale;
    Fixed x_scale;
    // FT_Fixed y_scale;
    Fixed y_scale;
    // FT_Pos ascender;
    Pos ascender;
    // FT_Pos descender;
    Pos descender;
    // FT_Pos height;
    Pos height;
    // FT_Pos max_advance;
    Pos max_advance;
}

struct SizeRec {
    // FT_Face face;
    Face face;
    // FT_Generic generic;
    Generic generic;
    // FT_Size_Metrics metrics;
    SizeMetrics metrics;
    // FT_Size_Internal internal;
    void* internal;
}
// typedef struct FT_SizeRec_*  FT_Size;
def Size = SizeRec*;

struct GlyphSlotRec {
    // FT_Library library;
    Library library;
    // FT_Face face;
    Face face;
    // FT_GlyphSlot next;
    GlyphSlot next;
    // FT_UInt glyph_index;
    UInt glyph_index;
    // FT_Generic generic;
    Generic generic;
    // FT_Glyph_Metrics metrics;
    GlyphMetrics metrics;
    // FT_Fixed linearHoriAdvance;
    Fixed linearHoriAdvance;
    // FT_Fixed linearVertAdvance;
    Fixed linearVertAdvance;
    // FT_Vector advance;
    Vector advance;
    // FT_Glyph_Format format;
    CInt format;
    // FT_Bitmap bitmap;
    Bitmap bitmap;
    // FT_Int bitmap_left;
    CInt bitmap_left;
    // FT_Int bitmap_top;
    CInt bitmap_top;
    // FT_Outline outline;
    Outline outline;
    // FT_UInt num_subglyphs;
    UInt num_subglyphs;
    // FT_SubGlyph subglyphs;
    void* subglyphs;
    // void* control_data;
    void* control_data;
    // long control_len;
    CLong control_len;
    // FT_Pos lsb_delta;
    Pos lsb_delta;
    // FT_Pos rsb_delta;
    Pos rsb_delta;
    // void* other;
    void* other;
    // FT_Slot_Internal internal;
    void* internal;
}
// typedef struct FT_GlyphSlotRec_*  FT_GlyphSlot;
def GlyphSlot = GlyphSlotRec*;

struct FaceRec {
    // FT_Long num_faces;
    Long num_faces;
    // FT_Long face_index;
    Long face_index;
    // FT_Long face_flags;
    Long face_flags;
    // FT_Long style_flags;
    Long style_flags;
    // FT_Long num_glyphs;
    Long num_glyphs;
    // FT_String* family_name;
    String* family_name;
    // FT_String* style_name;
    String* style_name;
    // FT_Int num_fixed_sizes;
    CInt num_fixed_sizes;
    // FT_Bitmap_Size* available_sizes;
    BitmapSize* available_sizes;
    // FT_Int num_charmaps;
    Int num_charmaps;
    // FT_CharMap* charmaps;
    CharMap* charmaps;
    // FT_Generic generic;
    Generic generic;
    // FT_BBox bbox;
    BBox bbox;
    // FT_UShort units_per_EM;
    UShort units_per_EM;
    // FT_Short ascender;
    Short ascender;
    // FT_Short descender;
    Short descender;
    // FT_Short height;
    Short height;
    // FT_Short max_advance_width;
    Short max_advance_width;
    // FT_Short max_advance_height;
    Short max_advance_height;
    // FT_Short underline_position;
    Short underline_position;
    // FT_Short underline_thickness;
    Short underline_thickness;
    // FT_GlyphSlot glyph;
    GlyphSlot glyph;
    // FT_Size size;
    Size size;
    //FT_CharMap charmap;
    CharMap charmap;
    // FT_Driver driver;
    void* driver;
    // FT_Memory memory;
    void* memory;
    // FT_Stream stream;
    void* stream;
    // FT_ListRec sizes_list;
    void* sizes_list;
    // FT_Generic autohint;
    void* autohint;
    // void* extensions;
    void* extensions;
    // FT_Face_Internal internal;
    void* internal;
}
// typedef struct FT_FaceRec_*  FT_Face;
def Face = FaceRec*;

fn Error initFreeType(Library* library) @extern("FT_Init_FreeType");
fn Error doneFreeType(Library library) @extern("FT_Done_FreeType");

fn Error newFace(Library* library, ZString pathname, Long face_index, Face* aface) @extern("FT_New_Face");
fn Error doneFace(Face face) @extern("FT_Done_Face");

fn UInt getCharIndex(Face face, ULong charcode) @extern("FT_Get_Char_Index");

fn Error loadGlyph(Face face, UInt glyph_index, Long load_flags) @extern("FT_Load_Glyph");

fn Error loadChar(Face face, ULong char_code, Long load_flags) @extern("FT_Load_Char");

fn Error setPixelSizes(Face face, UInt pixel_width, UInt pixel_height) @extern("FT_Set_Pixel_Sizes");

fn Error setCharSize(Face face, F26Dot6 char_width, F26Dot6 char_height, CUInt horz_resolution, UInt vert_resolution ) @extern("FT_Set_Char_Size");
